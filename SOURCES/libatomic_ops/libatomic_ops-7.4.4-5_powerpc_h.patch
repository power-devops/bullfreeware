--- ./src/atomic_ops/sysdeps/gcc/powerpc.h.origine	2016-09-27 08:17:16 +0200
+++ ./src/atomic_ops/sysdeps/gcc/powerpc.h	2016-09-27 10:47:56 +0200
@@ -33,6 +33,18 @@
         /* There seems to be no byte equivalent of lwarx, so this       */
         /* may really be what we want, at least in the 32-bit case.     */
 
+
+#ifdef _AIX
+/* labels are not supported on AIX */
+#define AO_PPC_L(label) /* empty */
+#define AO_PPC_A(labelBF, addr) addr
+#else
+#define AO_PPC_L(label) label ":\n"
+#define AO_PPC_A(labelBF, addr) labelBF
+#endif
+
+
+
 AO_INLINE void
 AO_nop_full(void)
 {
@@ -72,8 +84,8 @@
    __asm__ __volatile__ (
     "ld%U1%X1 %0,%1\n"
     "cmpw %0,%0\n"
-    "bne- 1f\n"
-    "1: isync\n"
+    "bne- " AO_PPC_A("1f", "$+4") "\n"
+    AO_PPC_L("1") "isync\n"
     : "=r" (result)
     : "m"(*addr) : "memory", "cr0");
 #else
@@ -83,8 +95,8 @@
   __asm__ __volatile__ (
     "lwz%U1%X1 %0,%1\n"
     "cmpw %0,%0\n"
-    "bne- 1f\n"
-    "1: isync\n"
+    "bne- " AO_PPC_A("1f", "$+4") "\n"
+    AO_PPC_L("1") "isync\n"
     : "=r" (result)
     : "m"(*addr) : "memory", "cc");
 #endif
@@ -114,12 +126,12 @@
   unsigned long temp = 1; /* locked value */
 
   __asm__ __volatile__(
-               "1:ldarx %0,0,%1\n"   /* load and reserve               */
+               AO_PPC_L("1") "ldarx %0,0,%1\n"   /* load and reserve               */
                "cmpdi %0, 0\n"       /* if load is                     */
-               "bne 2f\n"            /*   non-zero, return already set */
+               "bne " AO_PPC_A("2f", "$+12") "\n"            /*   non-zero, return already set */
                "stdcx. %2,0,%1\n"    /* else store conditional         */
-               "bne- 1b\n"           /* retry if lost reservation      */
-               "2:\n"                /* oldval is zero if we set       */
+               "bne- " AO_PPC_A("1b", "$-16") "\n"           /* retry if lost reservation      */
+               AO_PPC_L("2") "\n"                /* oldval is zero if we set       */
               : "=&r"(oldval)
               : "r"(addr), "r"(temp)
               : "memory", "cr0");
@@ -128,12 +140,12 @@
   int temp = 1; /* locked value */
 
   __asm__ __volatile__(
-               "1:lwarx %0,0,%1\n"   /* load and reserve               */
+               AO_PPC_L("1") "lwarx %0,0,%1\n"   /* load and reserve               */
                "cmpwi %0, 0\n"       /* if load is                     */
-               "bne 2f\n"            /*   non-zero, return already set */
+               "bne " AO_PPC_A("2f", "$+12") "\n"            /*   non-zero, return already set */
                "stwcx. %2,0,%1\n"    /* else store conditional         */
-               "bne- 1b\n"           /* retry if lost reservation      */
-               "2:\n"                /* oldval is zero if we set       */
+               "bne- " AO_PPC_A("1b", "$-16") "\n"           /* retry if lost reservation      */
+               AO_PPC_L("2") "\n"                /* oldval is zero if we set       */
               : "=&r"(oldval)
               : "r"(addr), "r"(temp)
               : "memory", "cr0");
@@ -177,25 +189,25 @@
     int result = 0;
 #   if defined(__powerpc64__) || defined(__ppc64__) || defined(__64BIT__)
       __asm__ __volatile__(
-        "1:ldarx %0,0,%2\n"     /* load and reserve             */
+        AO_PPC_L("1") "ldarx %0,0,%2\n"     /* load and reserve             */
         "cmpd %0, %4\n"         /* if load is not equal to      */
-        "bne 2f\n"              /*   old, fail                  */
+        "bne " AO_PPC_A("2f", "$+16") "\n"              /*   old, fail                  */
         "stdcx. %3,0,%2\n"      /* else store conditional       */
-        "bne- 1b\n"             /* retry if lost reservation    */
+        "bne- " AO_PPC_A("1b", "$-16") "\n"             /* retry if lost reservation    */
         "li %1,1\n"             /* result = 1;                  */
-        "2:\n"
+        AO_PPC_L("2") "\n"
         : "=&r"(oldval), "=&r"(result)
         : "r"(addr), "r"(new_val), "r"(old), "1"(result)
         : "memory", "cr0");
 #   else
       __asm__ __volatile__(
-        "1:lwarx %0,0,%2\n"     /* load and reserve             */
+        AO_PPC_L("1") "lwarx %0,0,%2\n"     /* load and reserve             */
         "cmpw %0, %4\n"         /* if load is not equal to      */
-        "bne 2f\n"              /*   old, fail                  */
+        "bne " AO_PPC_A("2f", "$+16") "\n"              /*   old, fail                  */
         "stwcx. %3,0,%2\n"      /* else store conditional       */
-        "bne- 1b\n"             /* retry if lost reservation    */
+        "bne- " AO_PPC_A("1b", "$-16") "\n"             /* retry if lost reservation    */
         "li %1,1\n"             /* result = 1;                  */
-        "2:\n"
+        AO_PPC_L("2") "\n"
         : "=&r"(oldval), "=&r"(result)
         : "r"(addr), "r"(new_val), "r"(old), "1"(result)
         : "memory", "cr0");
@@ -240,23 +252,23 @@
   AO_t fetched_val;
 # if defined(__powerpc64__) || defined(__ppc64__) || defined(__64BIT__)
     __asm__ __volatile__(
-      "1:ldarx %0,0,%1\n"       /* load and reserve             */
+      AO_PPC_L("1") "ldarx %0,0,%1\n"       /* load and reserve             */
       "cmpd %0, %3\n"           /* if load is not equal to      */
-      "bne 2f\n"                /*   old_val, fail              */
+      "bne " AO_PPC_A("2f", "$+12") "\n"                /*   old_val, fail              */
       "stdcx. %2,0,%1\n"        /* else store conditional       */
-      "bne- 1b\n"               /* retry if lost reservation    */
-      "2:\n"
+      "bne- " AO_PPC_A("1b", "$-16") "\n"               /* retry if lost reservation    */
+      AO_PPC_L("2") "\n"
       : "=&r"(fetched_val)
       : "r"(addr), "r"(new_val), "r"(old_val)
       : "memory", "cr0");
 # else
     __asm__ __volatile__(
-      "1:lwarx %0,0,%1\n"       /* load and reserve             */
+      AO_PPC_L("1") "lwarx %0,0,%1\n"       /* load and reserve             */
       "cmpw %0, %3\n"           /* if load is not equal to      */
-      "bne 2f\n"                /*   old_val, fail              */
+      "bne " AO_PPC_A("2f", "$+12") "\n"                /*   old_val, fail              */
       "stwcx. %2,0,%1\n"        /* else store conditional       */
-      "bne- 1b\n"               /* retry if lost reservation    */
-      "2:\n"
+      "bne- " AO_PPC_A("1b", "$-16") "\n"               /* retry if lost reservation    */
+      AO_PPC_L("2") "\n"
       : "=&r"(fetched_val)
       : "r"(addr), "r"(new_val), "r"(old_val)
       : "memory", "cr0");
@@ -303,19 +315,19 @@
   AO_t newval;
 #if defined(__powerpc64__) || defined(__ppc64__) || defined(__64BIT__)
   __asm__ __volatile__(
-               "1:ldarx %0,0,%2\n"   /* load and reserve                */
+               AO_PPC_L("1") "ldarx %0,0,%2\n"   /* load and reserve                */
                "add %1,%0,%3\n"      /* increment                       */
                "stdcx. %1,0,%2\n"    /* store conditional               */
-               "bne- 1b\n"           /* retry if lost reservation       */
+               "bne- " AO_PPC_A("1b", "$-12") "\n"           /* retry if lost reservation       */
               : "=&r"(oldval), "=&r"(newval)
               : "r"(addr), "r"(incr)
               : "memory", "cr0");
 #else
   __asm__ __volatile__(
-               "1:lwarx %0,0,%2\n"   /* load and reserve                */
+               AO_PPC_L("1") "lwarx %0,0,%2\n"   /* load and reserve                */
                "add %1,%0,%3\n"      /* increment                       */
                "stwcx. %1,0,%2\n"    /* store conditional               */
-               "bne- 1b\n"           /* retry if lost reservation       */
+               "bne- " AO_PPC_A("1b", "$-12") "\n"           /* retry if lost reservation       */
               : "=&r"(oldval), "=&r"(newval)
               : "r"(addr), "r"(incr)
               : "memory", "cr0");
