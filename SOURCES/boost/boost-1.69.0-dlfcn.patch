--- ./boost/stacktrace/detail/location_from_symbol.hpp.ORIGIN	2019-12-05 14:02:24 -0600
+++ ./boost/stacktrace/detail/location_from_symbol.hpp	2019-12-05 14:08:09 -0600
@@ -14,6 +14,7 @@
 
 #if !defined(BOOST_WINDOWS) && !defined(__CYGWIN__)
 #   include <dlfcn.h>
+#   include <boost/aix/dlfcn_more.h>
 #else
 #   include <boost/winapi/dll.hpp>
 #endif
--- /dev/null	2019-12-05 14:05:00 -0600
+++ ./boost/aix/dlfcn_more.h	2019-12-05 14:23:20 -0600
@@ -0,0 +1,24 @@
+/* Structure containing information about object searched using
+   `dladdr'.  */
+
+typedef struct
+{
+  const char *dli_fname;        /* File name of defining object.  */
+  void *dli_fbase;              /* Load address of that object.  */
+  const char *dli_sname;        /* Name of nearest symbol.  */
+  void *dli_saddr;              /* Exact value of nearest symbol.  */
+} Dl_info;
+
+/* When any of the above functions fails, call this function
+   to return a string describing the error.  Each call resets
+   the error string so that a following call returns null.  */
+//extern char *dlerror (void) __THROW;
+extern char *dlerror (void);
+
+/* Fill in *INFO with the following information about ADDRESS.
+   Returns 0 iff no shared object's segments contain that address.  */
+extern int dladdr (const void *__address, Dl_info *__info)
+//     __THROW __nonnull ((2));
+     ;
+
+extern int dladdr (const void *__address, Dl_info *__info) { return 0; }
