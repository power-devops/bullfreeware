From b22df680ea76953fb4dd4c0ea48b58b75e401da7 Mon Sep 17 00:00:00 2001
From: Helflym <chigot.c@gmail.com>
Date: Thu, 9 Aug 2018 14:25:40 -0500
Subject: [PATCH] internal/cpu, runtime: Fix TestPPC64minimalFeatures for AIX

This test retrieves which features are available on the current
processor. However, AIX don't have HWCAP/HWCAP2 variables to
get information as Linux.
However, some of them can be retrieved with the syscall getsystemcfg
---
 src/internal/cpu/cpu_ppc64x.go       | 68 -----------------------------------
 src/internal/cpu/cpu_ppc64x_aix.go   | 40 +++++++++++++++++++++
 src/internal/cpu/cpu_ppc64x_linux.go | 69 ++++++++++++++++++++++++++++++++++++
 src/internal/cpu/cpu_ppc64x_test.go  |  4 +--
 src/runtime/os2_aix.go               |  9 +++++
 src/runtime/os_aix.go                | 26 ++++++++++++++
 6 files changed, 146 insertions(+), 70 deletions(-)
 delete mode 100644 src/internal/cpu/cpu_ppc64x.go
 create mode 100644 src/internal/cpu/cpu_ppc64x_aix.go
 create mode 100644 src/internal/cpu/cpu_ppc64x_linux.go

diff --git a/src/internal/cpu/cpu_ppc64x.go b/src/internal/cpu/cpu_ppc64x.go
deleted file mode 100644
index 995cf02..0000000
--- a/src/internal/cpu/cpu_ppc64x.go
+++ /dev/null
@@ -1,68 +0,0 @@
-// Copyright 2017 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-// +build ppc64 ppc64le
-
-package cpu
-
-const CacheLineSize = 128
-
-// ppc64x doesn't have a 'cpuid' equivalent, so we rely on HWCAP/HWCAP2.
-// These are linknamed in runtime/os_linux_ppc64x.go and are initialized by
-// archauxv().
-var hwcap uint
-var hwcap2 uint
-
-// HWCAP/HWCAP2 bits. These are exposed by the kernel.
-const (
-	// ISA Level
-	_PPC_FEATURE2_ARCH_2_07 = 0x80000000
-	_PPC_FEATURE2_ARCH_3_00 = 0x00800000
-
-	// CPU features
-	_PPC_FEATURE_HAS_ALTIVEC     = 0x10000000
-	_PPC_FEATURE_HAS_DFP         = 0x00000400
-	_PPC_FEATURE_HAS_VSX         = 0x00000080
-	_PPC_FEATURE2_HAS_HTM        = 0x40000000
-	_PPC_FEATURE2_HAS_ISEL       = 0x08000000
-	_PPC_FEATURE2_HAS_VEC_CRYPTO = 0x02000000
-	_PPC_FEATURE2_HTM_NOSC       = 0x01000000
-	_PPC_FEATURE2_DARN           = 0x00200000
-	_PPC_FEATURE2_SCV            = 0x00100000
-)
-
-func doinit() {
-	options = []option{
-		{"htm", &PPC64.HasHTM},
-		{"htmnosc", &PPC64.HasHTMNOSC},
-		{"darn", &PPC64.HasDARN},
-		{"scv", &PPC64.HasSCV},
-
-		// These capabilities should always be enabled on ppc64 and ppc64le:
-		//  {"vmx", &PPC64.HasVMX},
-		//  {"dfp", &PPC64.HasDFP},
-		//  {"vsx", &PPC64.HasVSX},
-		//  {"isel", &PPC64.HasISEL},
-		//  {"vcrypto", &PPC64.HasVCRYPTO},
-	}
-
-	// HWCAP feature bits
-	PPC64.HasVMX = isSet(hwcap, _PPC_FEATURE_HAS_ALTIVEC)
-	PPC64.HasDFP = isSet(hwcap, _PPC_FEATURE_HAS_DFP)
-	PPC64.HasVSX = isSet(hwcap, _PPC_FEATURE_HAS_VSX)
-
-	// HWCAP2 feature bits
-	PPC64.IsPOWER8 = isSet(hwcap2, _PPC_FEATURE2_ARCH_2_07)
-	PPC64.HasHTM = isSet(hwcap2, _PPC_FEATURE2_HAS_HTM)
-	PPC64.HasISEL = isSet(hwcap2, _PPC_FEATURE2_HAS_ISEL)
-	PPC64.HasVCRYPTO = isSet(hwcap2, _PPC_FEATURE2_HAS_VEC_CRYPTO)
-	PPC64.HasHTMNOSC = isSet(hwcap2, _PPC_FEATURE2_HTM_NOSC)
-	PPC64.IsPOWER9 = isSet(hwcap2, _PPC_FEATURE2_ARCH_3_00)
-	PPC64.HasDARN = isSet(hwcap2, _PPC_FEATURE2_DARN)
-	PPC64.HasSCV = isSet(hwcap2, _PPC_FEATURE2_SCV)
-}
-
-func isSet(hwc uint, value uint) bool {
-	return hwc&value != 0
-}
diff --git a/src/internal/cpu/cpu_ppc64x_aix.go b/src/internal/cpu/cpu_ppc64x_aix.go
new file mode 100644
index 0000000..4fa6af4
--- /dev/null
+++ b/src/internal/cpu/cpu_ppc64x_aix.go
@@ -0,0 +1,40 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// +build aix
+// +build ppc64 ppc64le
+
+package cpu
+
+const CacheLineSize = 128
+
+// ppc64x doesn't have a 'cpuid' equivalent and HWCAP/HWCAP2 aren't available
+// on AIX. So we rely on information that the syscall getsystemcfg can provide use
+// The following variables are linknamed in runtime/os_aix.go and will contains
+// values provided by the syscalls
+var power_implementation uint
+var vmx_version uint
+var dfp_version uint
+
+const (
+	_PPC_IMPL_POWER8 = 0x10000
+	_PPC_IMPL_POWER9 = 0x20000
+)
+
+func doinit() {
+	PPC64.IsPOWER8 = power_implementation&_PPC_IMPL_POWER8 != 0
+	PPC64.IsPOWER9 = power_implementation&_PPC_IMPL_POWER9 != 0
+
+	PPC64.HasVMX = vmx_version > 0
+	PPC64.HasVSX = vmx_version > 1
+	PPC64.HasDFP = dfp_version != 0
+
+	// AIX don't have any way to retrieve this features
+	// However, ISEL is used in any Go programs so a "Helloworld" will crash
+	// if it's not available
+	// Vector Crypto is currently not used on ppc64 so we only
+	// set it for _test.go
+	PPC64.HasISEL = PPC64.IsPOWER8 || PPC64.IsPOWER9
+	PPC64.HasVCRYPTO = PPC64.IsPOWER8 || PPC64.IsPOWER9
+}
diff --git a/src/internal/cpu/cpu_ppc64x_linux.go b/src/internal/cpu/cpu_ppc64x_linux.go
new file mode 100644
index 0000000..46e8b24
--- /dev/null
+++ b/src/internal/cpu/cpu_ppc64x_linux.go
@@ -0,0 +1,69 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// +build linux
+// +build ppc64 ppc64le
+
+package cpu
+
+const CacheLineSize = 128
+
+// ppc64x doesn't have a 'cpuid' equivalent, so we rely on HWCAP/HWCAP2.
+// These are linknamed in runtime/os_linux_ppc64x.go and are initialized by
+// archauxv().
+var hwcap uint
+var hwcap2 uint
+
+// HWCAP/HWCAP2 bits. These are exposed by the kernel.
+const (
+	// ISA Level
+	_PPC_FEATURE2_ARCH_2_07 = 0x80000000
+	_PPC_FEATURE2_ARCH_3_00 = 0x00800000
+
+	// CPU features
+	_PPC_FEATURE_HAS_ALTIVEC     = 0x10000000
+	_PPC_FEATURE_HAS_DFP         = 0x00000400
+	_PPC_FEATURE_HAS_VSX         = 0x00000080
+	_PPC_FEATURE2_HAS_HTM        = 0x40000000
+	_PPC_FEATURE2_HAS_ISEL       = 0x08000000
+	_PPC_FEATURE2_HAS_VEC_CRYPTO = 0x02000000
+	_PPC_FEATURE2_HTM_NOSC       = 0x01000000
+	_PPC_FEATURE2_DARN           = 0x00200000
+	_PPC_FEATURE2_SCV            = 0x00100000
+)
+
+func doinit() {
+	options = []option{
+		{"htm", &PPC64.HasHTM},
+		{"htmnosc", &PPC64.HasHTMNOSC},
+		{"darn", &PPC64.HasDARN},
+		{"scv", &PPC64.HasSCV},
+
+		// These capabilities should always be enabled on ppc64 and ppc64le:
+		//  {"vmx", &PPC64.HasVMX},
+		//  {"dfp", &PPC64.HasDFP},
+		//  {"vsx", &PPC64.HasVSX},
+		//  {"isel", &PPC64.HasISEL},
+		//  {"vcrypto", &PPC64.HasVCRYPTO},
+	}
+
+	// HWCAP feature bits
+	PPC64.HasVMX = isSet(hwcap, _PPC_FEATURE_HAS_ALTIVEC)
+	PPC64.HasDFP = isSet(hwcap, _PPC_FEATURE_HAS_DFP)
+	PPC64.HasVSX = isSet(hwcap, _PPC_FEATURE_HAS_VSX)
+
+	// HWCAP2 feature bits
+	PPC64.IsPOWER8 = isSet(hwcap2, _PPC_FEATURE2_ARCH_2_07)
+	PPC64.HasHTM = isSet(hwcap2, _PPC_FEATURE2_HAS_HTM)
+	PPC64.HasISEL = isSet(hwcap2, _PPC_FEATURE2_HAS_ISEL)
+	PPC64.HasVCRYPTO = isSet(hwcap2, _PPC_FEATURE2_HAS_VEC_CRYPTO)
+	PPC64.HasHTMNOSC = isSet(hwcap2, _PPC_FEATURE2_HTM_NOSC)
+	PPC64.IsPOWER9 = isSet(hwcap2, _PPC_FEATURE2_ARCH_3_00)
+	PPC64.HasDARN = isSet(hwcap2, _PPC_FEATURE2_DARN)
+	PPC64.HasSCV = isSet(hwcap2, _PPC_FEATURE2_SCV)
+}
+
+func isSet(hwc uint, value uint) bool {
+	return hwc&value != 0
+}
diff --git a/src/internal/cpu/cpu_ppc64x_test.go b/src/internal/cpu/cpu_ppc64x_test.go
index 9c43d1e..74b56b1 100644
--- a/src/internal/cpu/cpu_ppc64x_test.go
+++ b/src/internal/cpu/cpu_ppc64x_test.go
@@ -12,8 +12,8 @@ import (
 )
 
 func TestPPC64minimalFeatures(t *testing.T) {
-	if !PPC64.IsPOWER8 {
-		t.Fatalf("IsPOWER8 expected true, got false")
+	if !PPC64.IsPOWER8 && !PPC64.IsPOWER9 {
+		t.Fatalf("IsPOWER8 || IsPOWER9 expected true, got false")
 	}
 	if !PPC64.HasVMX {
 		t.Fatalf("HasVMX expected true, got false")
diff --git a/src/runtime/os2_aix.go b/src/runtime/os2_aix.go
index d977d3e..889b1fb 100644
--- a/src/runtime/os2_aix.go
+++ b/src/runtime/os2_aix.go
@@ -33,6 +33,7 @@
 //go:cgo_import_dynamic libc_close close "libc.a/shr_64.o"
 //go:cgo_import_dynamic libc_exit exit "libc.a/shr_64.o"
 //go:cgo_import_dynamic libc_getpid getpid "libc.a/shr_64.o"
+//go:cgo_import_dynamic libc_getsystemcfg getsystemcfg "libc.a/shr_64.o"
 //go:cgo_import_dynamic libc_kill kill "libc.a/shr_64.o"
 //go:cgo_import_dynamic libc_madvise madvise "libc.a/shr_64.o"
 //go:cgo_import_dynamic libc_malloc malloc "libc.a/shr_64.o"
@@ -69,6 +70,7 @@
 //go:linkname libc_close libc_close
 //go:linkname libc_exit libc_exit
 //go:linkname libc_getpid libc_getpid
+//go:linkname libc_getsystemcfg libc_getsystemcfg
 //go:linkname libc_kill libc_kill
 //go:linkname libc_madvise libc_madvise
 //go:linkname libc_malloc libc_malloc
@@ -107,6 +109,7 @@
 	libc_close,
 	libc_exit,
 	libc_getpid,
+	libc_getsystemcfg,
 	libc_kill,
 	libc_madvise,
 	libc_malloc,
@@ -477,3 +480,9 @@
 		throw("syscall sigthreadmask")
 	}
 }
+
+//go:nosplit
+func getsystemcfg(label uint) uintptr {
+	r, _ := syscall1(&libc_getsystemcfg, uintptr(label))
+	return r
+}
diff --git a/src/runtime/os_aix.go b/src/runtime/os_aix.go
index feb364f..1db739f 100644
--- a/src/runtime/os_aix.go
+++ b/src/runtime/os_aix.go
@@ -92,6 +92,7 @@ func semawakeup(mp *m) {
 func osinit() {
 	ncpu = int32(sysconf(__SC_NPROCESSORS_ONLN))
 	physPageSize = sysconf(__SC_PAGE_SIZE)
+	setupSystemConf()
 }
 
 // Ms related functions
@@ -259,3 +260,28 @@ func walltime() (sec int64, nsec int32) {
 	}
 	return ts.tv_sec, int32(ts.tv_nsec)
 }
+
+//go:linkname cpu_power_implementation internal/cpu.power_implementation
+var cpu_power_implementation uint
+
+//go:linkname cpu_vmx_version internal/cpu.vmx_version
+var cpu_vmx_version uint
+
+//go:linkname cpu_dfp_version internal/cpu.dfp_version
+var cpu_dfp_version uint
+
+const (
+	// getsystemcfg label
+	SC_IMPL    = 2
+	SC_VMX_VER = 47
+	SC_DFP_VER = 53
+)
+
+// setupSystemConf retrieves information about the CPU.
+// This sets the variables above which are linked to "internal/cpu"
+// It uses getsystemcfg syscall to retrieve everything
+func setupSystemConf() {
+	cpu_power_implementation = uint(getsystemcfg(SC_IMPL))
+	cpu_vmx_version = uint(getsystemcfg(SC_VMX_VER))
+	cpu_dfp_version = uint(getsystemcfg(SC_DFP_VER))
+}
-- 
1.8.3.1

