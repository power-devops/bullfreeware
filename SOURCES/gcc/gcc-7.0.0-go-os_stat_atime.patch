diff -Nur gcc-7-20170203.orig/libgo/go/os/stat_atim.go gcc-7-20170203.new/libgo/go/os/stat_atim.go
--- gcc-7-20170203.orig/libgo/go/os/stat_atim.go	2016-11-16 22:10:21 -0600
+++ gcc-7-20170203.new/libgo/go/os/stat_atim.go	2017-02-06 14:59:21 -0600
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build aix linux openbsd solaristag
+// +build linux openbsd solaristag
 
 package os
 
--- gcc-7-20161106.orig/libgo/go/os/stat_aix.go	1970-01-01 01:00:00 +0100
+++ gcc-7-20161106.new/libgo/go/os/stat_aix.go	2016-11-28 14:26:07 +0100
@@ -0,0 +1,53 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+import (
+        "syscall"
+        "time"
+)
+
+func fillFileStatFromSys(fs *fileStat, name string) {
+        fs.name = basename(name)
+        fs.size = int64(fs.sys.Size)
+        fs.modTime = time.Unix(int64(fs.sys.Mtime), int64(fs.sys.St_mtime_n))
+        fs.mode = FileMode(fs.sys.Mode & 0777)
+        switch fs.sys.Mode & syscall.S_IFMT {
+        case syscall.S_IFBLK:
+                fs.mode |= ModeDevice
+        case syscall.S_IFCHR:
+                fs.mode |= ModeDevice | ModeCharDevice
+        case syscall.S_IFDIR:
+                fs.mode |= ModeDir
+        case syscall.S_IFIFO:
+                fs.mode |= ModeNamedPipe
+        case syscall.S_IFLNK:
+                fs.mode |= ModeSymlink
+        case syscall.S_IFREG:
+                // nothing to do
+        case syscall.S_IFSOCK:
+                fs.mode |= ModeSocket
+        }
+        if fs.sys.Mode&syscall.S_ISGID != 0 {
+                fs.mode |= ModeSetgid
+        }
+        if fs.sys.Mode&syscall.S_ISUID != 0 {
+                fs.mode |= ModeSetuid
+        }
+        if fs.sys.Mode&syscall.S_ISVTX != 0 {
+                fs.mode |= ModeSticky
+        }
+}
+
+func timespecToTime(ts syscall.Timespec) time.Time {
+        return time.Unix(int64(ts.Sec), int64(ts.Nsec))
+}
+
+// For testing.
+func atime(fi FileInfo) time.Time {
+        stat := fi.Sys().(*syscall.Stat_t)
+        return time.Unix(int64(stat.Atime), int64(stat.St_atime_n))
+}
+
