--- ./libgo/go/runtime/traceback_gccgo.go.orig	2017-05-31 15:55:10 -0500
+++ ./libgo/go/runtime/traceback_gccgo.go	2017-05-31 17:19:37 -0500
@@ -57,13 +57,6 @@
 //extern runtime_callers
 func c_callers(skip int32, locbuf *location, max int32, keepThunks bool) int32
 
-// callers returns a stack trace of the current goroutine.
-// The gc version of callers takes []uintptr, but we take []location.
-func callers(skip int, locbuf []location) int {
-	n := c_callers(int32(skip), &locbuf[0], int32(len(locbuf)), false)
-	return int(n)
-}
-
 // traceback prints a traceback of the current goroutine.
 // This differs from the gc version, which is given pc, sp, lr and g and
 // can print a traceback of any goroutine.
--- /dev/null	2017-05-31 17:23:13 -0500
+++ ./libgo/go/runtime/traceback_callers_gccgo.go	2017-05-31 17:20:34 -0500
@@ -0,0 +1,17 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Traceback support for gccgo.
+// Default version of callers func.
+
+// +build !aix
+
+package runtime
+
+// callers returns a stack trace of the current goroutine.
+// The gc version of callers takes []uintptr, but we take []location.
+func callers(skip int, locbuf []location) int {
+	n := c_callers(int32(skip), &locbuf[0], int32(len(locbuf)), false)
+	return int(n)
+}
--- /dev/null	2017-05-31 17:23:13 -0500
+++ ./libgo/go/runtime/traceback_callers_noinline_gccgo.go	2017-05-31 17:20:18 -0500
@@ -0,0 +1,18 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Traceback support for gccgo.
+// Version of callers func for AIX.
+
+// +build aix
+
+package runtime
+
+// callers returns a stack trace of the current goroutine.
+// The gc version of callers takes []uintptr, but we take []location.
+//go:noinline
+func callers(skip int, locbuf []location) int {
+	n := c_callers(int32(skip), &locbuf[0], int32(len(locbuf)), false)
+	return int(n)
+}
