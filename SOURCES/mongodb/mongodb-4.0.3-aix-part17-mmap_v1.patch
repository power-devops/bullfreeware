--- ./src/mongo/db/storage/mmap_v1/aligned_builder.h.ORIGIN	2015-12-02 20:01:34.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/aligned_builder.h	2015-12-08 15:30:12.000000000 +0100
@@ -72,31 +72,39 @@
     }
 
     void appendChar(char j) {
-        *((char*)grow(sizeof(char))) = j;
+        BOOST_STATIC_ASSERT(CHAR_BIT == 8);
+        appendNumImpl(j);
     }
     void appendNum(char j) {
-        *((char*)grow(sizeof(char))) = j;
+        appendNumImpl(j);
     }
     void appendNum(short j) {
-        *((short*)grow(sizeof(short))) = j;
+        BOOST_STATIC_ASSERT(sizeof(short) == 2);
+        appendNumImpl(j);
     }
     void appendNum(int j) {
-        *((int*)grow(sizeof(int))) = j;
+        BOOST_STATIC_ASSERT(sizeof(int) == 4);
+        appendNumImpl(j);
     }
     void appendNum(unsigned j) {
-        *((unsigned*)grow(sizeof(unsigned))) = j;
+        appendNumImpl(j);
     }
+#if 0
+    // Bool does not have a well defined encoding.
     void appendNum(bool j) {
-        *((bool*)grow(sizeof(bool))) = j;
+        appendNumImpl(j);
     }
+#endif
     void appendNum(double j) {
-        *((double*)grow(sizeof(double))) = j;
+        BOOST_STATIC_ASSERT(sizeof(double) == 8);
+        appendNumImpl(j);
     }
     void appendNum(long long j) {
-        *((long long*)grow(sizeof(long long))) = j;
+        BOOST_STATIC_ASSERT(sizeof(long long) == 8);
+        appendNumImpl(j);
     }
     void appendNum(unsigned long long j) {
-        *((unsigned long long*)grow(sizeof(unsigned long long))) = j;
+        appendNumImpl(j);
     }
 
     void appendBuf(const void* src, size_t len) {
@@ -122,6 +130,11 @@
 private:
     static const unsigned Alignment = 8192;
 
+    template<typename T>
+    void appendNumImpl(T t) {
+        DataView(grow(sizeof(t))).write(tagLittleEndian(t));
+    }
+
     /** returns the pre-grow write position */
     inline char* grow(unsigned by) {
         unsigned oldlen = _len;
--- ./src/mongo/db/storage/mmap_v1/bswap.h.ORIGIN	1970-01-01 01:00:00.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/bswap.h	2015-12-08 15:30:43.000000000 +0100
@@ -0,0 +1,528 @@
+#pragma once
+
+#ifndef MONGO_BSWAP_H
+#define MONGO_BSWAP_H
+
+#include "mongo/platform/endian.h"
+#include "boost/detail/endian.hpp"
+#include "boost/static_assert.hpp"
+#include <string.h>
+
+#ifdef __APPLE__
+#  include <libkern/OSByteOrder.h>
+#endif
+
+namespace mongo {
+   class Nullstream;
+
+   // Generic (portable) byte swap function
+   template<class T> T byteSwap( T j ) {
+       
+#ifdef HAVE_BSWAP32
+       if ( sizeof( T ) == 4 ) {
+           return __builtin_bswap32( j );
+       }
+#endif
+#ifdef HAVE_BSWAP64
+       if ( sizeof( T ) == 8 ) {
+           return __builtin_bswap64( j );
+       }
+#endif
+
+      T retVal = 0;
+      for ( unsigned i = 0; i < sizeof( T ); ++i ) {
+         
+         // 7 5 3 1 -1 -3 -5 -7
+         int shiftamount = sizeof(T) - 2 * i - 1;
+         // 56 40 24 8 -8 -24 -40 -56
+         shiftamount *= 8;
+
+         // See to it that the masks can be re-used
+         if ( shiftamount > 0 ) {
+            T mask = T( 0xff ) << ( 8 * i );
+            retVal |= ( (j & mask ) << shiftamount );
+         } else {
+            T mask = T( 0xff ) << ( 8 * (sizeof(T) - i - 1) );
+            retVal |= ( j >> -shiftamount ) & mask;
+         }
+      }
+      return retVal;
+   }
+
+   template<> inline double byteSwap( double j ) {
+      union {
+         double d;
+         unsigned long long l;
+      } u;
+      u.d = j;
+      u.l = byteSwap<unsigned long long>( u.l );
+      return u.d;
+   }
+
+
+   // Here we assume that double is big endian if ints are big endian
+   // and also that the format is the same as for x86 when swapped.
+   template<class T> inline T littleEndian( T j ) {
+#if MONGO_BYTE_ORDER == 1234
+      return j;
+#else
+      return byteSwap<T>(j);
+#endif
+   }
+
+   template<class T> inline T bigEndian( T j ) {
+#if MONGO_BYTE_ORDER == 4321
+      return j;
+#else
+      return byteSwap<T>(j);
+#endif
+   }
+
+#if defined(__arm__) 
+#  if defined(__MAVERICK__)
+#    define MONGO_ARM_SPECIAL_ENDIAN
+   // Floating point is always little endian
+   template<> inline double littleEndian( double j ) {
+       return j;
+   }
+#  elif defined(__VFP_FP__) || MONGO_BYTE_ORDER == 4321
+   // Native endian floating points even if FPA is used
+#  else
+#    define MONGO_ARM_SPECIAL_ENDIAN
+   // FPA mixed endian floating point format 456701234
+   template<> inline double littleEndian( double j ) {
+      union { double d; unsigned u[2]; } u;
+      u.d = j;
+      std::swap( u.u[0], u.u[1] );
+      return u.d;
+   }
+#  endif
+#  if defined(MONGO_ARM_SPECIAL_ENDIAN)
+   template<> inline double bigEndian( double j ) {
+      return byteSwap<double>( littleEndian<double>( j ) );
+   }
+#  endif
+#endif
+
+
+   BOOST_STATIC_ASSERT( sizeof( double ) == sizeof( unsigned long long ) );
+
+   template<class S, class D> inline D convert( S src )
+   {
+      union { S s; D d; } u;
+      u.s = src;
+      return u.d;
+   }
+
+   template<> inline char convert<bool,char>( bool src ) {
+      return src;
+   }
+
+   template<> inline bool convert<char, bool>( char src ) {
+      return src;
+   }
+
+
+#define MONGO_ENDIAN_BODY( MYTYPE, BASE_TYPE, T )                       \
+      MYTYPE& operator=( const T& val ) {                               \
+          BASE_TYPE::_val = val;                                        \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      operator const T() const {                                        \
+          return BASE_TYPE::_val;                                       \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator+=( T other ) {                                   \
+          (*this) = T(*this) + other;                                   \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator-=( T other ) {                                   \
+          (*this) = T(*this) - other;                                   \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator&=( T other ) {                                   \
+          (*this) = T(*this) & other;                                   \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator|=( T other ) {                                   \
+          (*this) = T(*this) | other;                                   \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator^=( T other ) {                                   \
+          (*this) = T(*this) ^ other;                                   \
+          return *this;                                                 \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator++() {                                            \
+          return (*this) += 1;                                          \
+      }                                                                 \
+                                                                        \
+      MYTYPE operator++(int) {                                          \
+          MYTYPE old = *this;                                           \
+          ++(*this);                                                    \
+          return old;                                                   \
+      }                                                                 \
+                                                                        \
+      MYTYPE& operator--() {                                            \
+          return (*this) -= 1;                                          \
+      }                                                                 \
+                                                                        \
+      MYTYPE operator--(int) {                                          \
+          MYTYPE old = *this;                                           \
+          --(*this);                                                    \
+          return old;                                                   \
+      }                                                                 \
+                                                                        \
+      friend std::ostream& operator<<( std::ostream& ost, MYTYPE val ) { \
+          return ost << T(val);                                         \
+      }                                                                 \
+                                                                        \
+      friend Nullstream& operator<<( Nullstream& ost, MYTYPE val ) {    \
+          return ost << T(val);                                         \
+      }                                                                 \
+                                                                        \
+      std::string toString() const {                                    \
+          std::stringstream ss;                                         \
+          ss << this;                                                   \
+          return ss.str();                                              \
+      }
+  
+
+  template<class T, class D> void storeLE( D* dest, T src ) {
+#if MONGO_BYTE_ORDER == 1234 || !defined( ALIGNMENT_IMPORTANT )
+      // This also assumes no alignment issues
+      *dest = littleEndian<T>( src );
+#else
+      unsigned char* u_dest = reinterpret_cast<unsigned char*>( dest );
+      for ( unsigned i = 0; i < sizeof( T ); ++i ) {
+         u_dest[i] = src >> ( 8 * i );
+      }
+#endif
+   }
+   
+  template<class T, class S> T loadLE( const S* data ) {
+#ifdef __APPLE__
+      switch ( sizeof( T ) ) {
+      case 8:
+          return OSReadLittleInt64( data, 0 );
+      case 4:
+          return OSReadLittleInt32( data, 0 );
+      case 2:
+          return OSReadLittleInt16( data, 0 );
+      }
+#endif
+
+#if MONGO_BYTE_ORDER == 1234 || !defined( ALIGNMENT_IMPORTANT )
+#if defined(__powerpc__)
+      // Without this trick gcc (4.4.5) compiles 64 bit load to 8 byte loads.
+      if ( sizeof( T ) == 8 ) {
+          const unsigned * x = reinterpret_cast<const unsigned*>( data );
+          unsigned long long a = loadLE<unsigned, unsigned>( x );
+          unsigned long long b = loadLE<unsigned, unsigned>( x + 1 ); 
+          return a | ( b << 32 );
+      }
+#endif
+      return littleEndian<T>( *data );
+#else
+      T retval = 0;
+      const unsigned char* u_data = reinterpret_cast<const unsigned char*>( data );
+      for( unsigned i = 0; i < sizeof( T ); ++i ) {
+          retval |= T( u_data[i] ) << ( 8 * i );
+      }
+      return retval;
+#endif
+  }
+
+  template<class T, class D> void store_big( D* dest, T src ) {
+#if MONGO_BYTE_ORDER == 4321 || !defined( ALIGNMENT_IMPORTANT )
+      // This also assumes no alignment issues
+      *dest = bigEndian<T>( src );
+#else
+      unsigned char* u_dest = reinterpret_cast<unsigned char*>( dest );
+      for ( unsigned i = 0; i < sizeof( T ); ++i ) {
+          u_dest[ sizeof(T) - 1 - i ] = src >> ( 8 * i );
+      }
+#endif
+   }
+   
+  template<class T, class S> T load_big( const S* data ) {
+
+      if ( sizeof( T ) == 8 && sizeof( void* ) == 4 ) {
+          const unsigned * x = reinterpret_cast<const unsigned*>( data );
+          unsigned long long a = load_big<unsigned, unsigned>( x );
+          unsigned long long b = load_big<unsigned, unsigned>( x + 1 );
+          return a << 32 | b;
+      }
+
+#if MONGO_BYTE_ORDER == 4321 || !defined( ALIGNMENT_IMPORTANT )
+      return bigEndian<T>( *data );
+#else
+      T retval = 0;
+      const unsigned char* u_data = reinterpret_cast<const unsigned char*>( data );
+      for( unsigned i = 0; i < sizeof( T ); ++i ) {
+          retval |= T( u_data[ sizeof(T) - 1 - i ] ) << ( 8 * i );
+      }
+      return retval;
+#endif
+  }
+
+
+  /** Converts the type to the type to actually store */
+  template<typename T> class storage_type {
+  public:
+      typedef T t;
+      
+      static inline t toStorage( T src ) { return src; }
+      static inline T fromStorage( t src ) { return src; }
+
+  };
+
+  template<> class storage_type<bool> {
+  public:
+      typedef unsigned char t;
+
+      static inline t toStorage( bool src ) { return src; }
+      static inline bool fromStorage( t src ) { return src; }      
+      
+  };
+
+  template<> class storage_type<double> {
+  public:
+      typedef unsigned long long t;
+
+      static inline t toStorage( double src ) { return convert<double,t>( src ); }
+      static inline double fromStorage( t src ) { 
+          return convert<t,double>( src ); 
+      }
+  };
+
+#pragma pack(1)
+
+#ifdef __GNUC__
+  #define ATTRIB_PACKED __attribute__((packed))
+#else
+  #define ATTRIB_PACKED
+#endif
+
+#pragma pack(1)
+  template<class T> struct packed_little_storage {
+  protected:
+      typedef storage_type<T> STORAGE;
+      typedef typename STORAGE::t S;
+      S _val;
+
+      void store( S val ) {
+#ifdef __APPLE__
+          switch ( sizeof( S ) ) {
+          case 8:
+              return OSWriteLittleInt64( &_val, 0, val );
+          case 4:
+              return OSWriteLittleInt32( &_val, 0, val );
+          case 2:
+              return OSWriteLittleInt16( &_val, 0, val );
+      }
+#endif
+
+#if MONGO_BYTE_ORDER == 1234 || !defined( ALIGNMENT_IMPORTANT )
+          _val = littleEndian<S>( val );
+#else
+          unsigned char* u_dest = reinterpret_cast<unsigned char*>( &_val );
+          for ( unsigned i = 0; i < sizeof( T ); ++i ) {
+              u_dest[i] = val >> ( 8 * i );
+          }
+#endif
+      }
+
+      S load() const {
+          // Here S should always be an integer type
+#ifdef __APPLE__
+          switch ( sizeof( S ) ) {
+          case 8:
+              return OSReadLittleInt64( &_val, 0 );
+          case 4:
+              return OSReadLittleInt32( &_val, 0 );
+          case 2:
+              return OSReadLittleInt16( &_val, 0 );
+          }
+#endif
+          // Without this trick gcc (4.4.5) compiles 64 bit load to 8 byte loads.
+          // (ppc)
+          if ( sizeof( S ) == 8 && sizeof( void* ) == 4 ) {
+              const packed_little_storage<unsigned>* x = 
+                  reinterpret_cast<const packed_little_storage<unsigned>* >(this);
+              
+              unsigned long long a = x[0];
+              unsigned long long b = x[1];
+              return a | ( b << 32 ); 
+          }
+              
+
+#if MONGO_BYTE_ORDER == 1234 || !defined( ALIGNMENT_IMPORTANT )
+          return littleEndian<S>( _val );
+#else
+          S retval = 0;
+          const unsigned char* u_data = 
+              reinterpret_cast<const unsigned char*>( &_val );
+          for( unsigned i = 0; i < sizeof( T ); ++i ) {
+              retval |= S( u_data[i] ) << ( 8 * i );
+          }
+          return retval;
+#endif
+      }
+  public:      
+      inline packed_little_storage& operator=( T val ) {
+          store( STORAGE::toStorage( val ) );
+          return *this;
+      }
+          
+      inline operator T() const {
+          return STORAGE::fromStorage( load() );
+      }
+      
+      
+  } ATTRIB_PACKED ;
+
+#ifdef MONGO_ARM_SPECIAL_ENDIAN
+  template<> struct packed_little_storage<double> {
+  private:
+      double _val;
+  public:
+      inline packed_little_storage<double>& operator=( double val ) {
+          _val = littleEndian<double>( val );
+          return *this;
+      }
+      
+      inline operator double() const {
+          return littleEndian<double>( _val );
+      }
+  } ATTRIB_PACKED ;
+#endif
+
+  template<class T> struct packed_big_storage {
+  private:
+      typedef typename storage_type<T>::t S;
+      S _val;
+  public:
+      
+     packed_big_storage& operator=( T val ) {
+        store_big<S>( &_val, convert<T,S>( val ) );
+        return *this;
+     }
+     
+     operator T() const {
+        return convert<S,T>( load_big<S>( &_val ) );
+     }
+  } ATTRIB_PACKED ;
+
+#ifdef MONGO_ARM_SPECIAL_ENDIAN
+  template<> struct packed_big_storage<double> {
+  private:
+      double _val;
+  public:
+      inline packed_big_storage<double>& operator=( double val ) {
+          _val = bigEndian<double>( val );
+          return *this;
+      }
+      
+      inline operator double() const {
+          return bigEndian<double>( _val );
+      }
+  } ATTRIB_PACKED;
+#endif
+
+
+#pragma pack()
+  
+
+#define MONGO_ENDIAN_REF_FUNCS( TYPE )                          \
+      static TYPE& ref( char* src ) {                           \
+          return *reinterpret_cast<TYPE*>( src );               \
+      }                                                         \
+                                                                \
+      static const TYPE& ref( const char* src ) {               \
+          return *reinterpret_cast<const TYPE*>( src );         \
+      }                                                         \
+                                                                \
+      static TYPE& ref( void* src ) {                           \
+          return ref( reinterpret_cast<char*>( src ) );         \
+      }                                                         \
+                                                                \
+      static const TYPE& ref( const void* src ) {               \
+          return ref( reinterpret_cast<const char*>( src ) );   \
+      }
+
+  template<class T> class little_pod {
+  protected:
+      packed_little_storage<T> _val;
+  public:
+      MONGO_ENDIAN_REF_FUNCS( little_pod );
+      MONGO_ENDIAN_BODY( little_pod, little_pod<T>, T );
+  } ATTRIB_PACKED;
+
+  template<class T> class little : public little_pod<T> {
+  public:
+      inline little( T x ) {
+          *this = x;
+      }
+
+      inline little() {}
+      MONGO_ENDIAN_REF_FUNCS( little );
+      MONGO_ENDIAN_BODY( little, little_pod<T>, T );
+  } ATTRIB_PACKED;
+
+  template<class T> class big_pod {
+  protected:
+      packed_big_storage<T> _val;
+  public:
+      MONGO_ENDIAN_REF_FUNCS( big_pod );
+      MONGO_ENDIAN_BODY( big_pod, big_pod<T>, T );
+  } ATTRIB_PACKED;
+
+  template<class T> class big : public big_pod<T> {
+  public:
+      inline big( T x ) {
+          *this = x;
+      }
+
+      inline big() {}
+      MONGO_ENDIAN_REF_FUNCS( big );
+      MONGO_ENDIAN_BODY( big, big_pod<T>, T );
+  } ATTRIB_PACKED;
+
+  // Helper functions
+  template<class T> T readLE( const void* data ) {
+      return little<T>::ref( data );
+  }
+
+  template<class T> T readBE( const void* data ) {
+      return big<T>::ref( data );
+  }
+
+  template<class T> void copyLE( void* dest, T src ) {
+      little<T>::ref( dest ) = src;
+  }
+
+  template<class T> void copyBE( void* dest, T src ) {
+      big<T>::ref( dest ) = src;
+  }
+
+
+  BOOST_STATIC_ASSERT( sizeof( little_pod<double> ) == 8 );
+  BOOST_STATIC_ASSERT( sizeof( little<double> ) == 8 );
+  BOOST_STATIC_ASSERT( sizeof( big<bool> ) == 1 );
+  BOOST_STATIC_ASSERT( sizeof( little<bool> ) == 1 );
+ 
+  /** Marker class to inherit from to mark that endianess has been taken care of */
+  struct endian_aware { typedef int endian_aware_t; };
+
+  /** To assert that a class has the endian aware marker */
+  #define STATIC_ASSERT_HAS_ENDIAN_AWARE_MARKER( T ) BOOST_STATIC_ASSERT( sizeof( typename T::endian_aware_t ) > 0 )
+
+}
+
+#endif
--- ./src/mongo/db/storage/mmap_v1/btree/btree_ondisk.h.ORIGIN	2015-12-02 20:01:34.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/btree/btree_ondisk.h	2015-12-08 15:32:17.000000000 +0100
@@ -222,9 +222,16 @@
         // endian
         unsigned long long result = ofs;
         char* cursor = reinterpret_cast<char*>(&result);
+#if MONGO_CONFIG_BYTE_ORDER == 4321
+        *reinterpret_cast<uint8_t*>(cursor) = uint8_t(0);
+        for (int i = 0; i < 3; i++) {
+            *reinterpret_cast<uint8_t*>(cursor + i + 1) = *reinterpret_cast<const uint8_t*>(&_a[i]);
+        }
+#else
         *reinterpret_cast<uint16_t*>(cursor + 4) = *reinterpret_cast<const uint16_t*>(&_a[0]);
         *reinterpret_cast<uint8_t*>(cursor + 6) = *reinterpret_cast<const uint8_t*>(&_a[2]);
         *reinterpret_cast<uint8_t*>(cursor + 7) = uint8_t(0);
+#endif
         return result;
     }
 
@@ -290,7 +297,11 @@
         if (isNull())
             return DiskLoc();
         unsigned a = *((unsigned*)(_a - 1));
+#if MONGO_CONFIG_BYTE_ORDER == 4321
+        return DiskLoc(a & OurMaxA, ofs);
+#else
         return DiskLoc(a >> 8, ofs);
+#endif
     }
 
     std::string toString() const {
--- ./src/mongo/db/storage/mmap_v1/dur_journalformat.h.ORIGIN	2015-12-02 20:01:34.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/dur_journalformat.h	2015-12-08 15:38:52.000000000 +0100
@@ -34,6 +34,7 @@
 #include <string>
 
 #include "mongo/util/assert_util.h"
+#include "mongo/db/storage/mmap_v1/bswap.h"
 
 namespace mongo {
 
@@ -60,7 +61,7 @@
 #else
     enum { CurrentVersion = 0x4149 };
 #endif
-    unsigned short _version;
+    little<unsigned short> _version;
 
     // these are just for diagnostic ease (make header more useful as plain text)
     char n1;           // '\n'
@@ -70,7 +71,7 @@
                        // by code.
     char n3, n4;       // '\n', '\n'
 
-    unsigned long long fileId;  // unique identifier that will be in each JSectHeader.
+    little<unsigned long long> fileId;  // unique identifier that will be in each JSectHeader.
                                 // important as we recycle prealloced files
 
     char reserved3[8026];  // 8KB total for the file header
@@ -90,11 +91,11 @@
 */
 struct JSectHeader {
 private:
-    unsigned _sectionLen;  // unpadded length in bytes of the whole section
+    little<unsigned> _sectionLen;  // unpadded length in bytes of the whole section
 public:
-    unsigned long long
+    little<unsigned long long>
         seqNumber;  // sequence number that can be used on recovery to not do too much work
-    unsigned long long fileId;  // matches JHeader::fileId
+    little<unsigned long long> fileId;  // matches JHeader::fileId
     unsigned sectionLen() const {
         return _sectionLen;
     }
@@ -125,23 +126,23 @@
         OpCode_Min = 0xfffff000
     };
     union {
-        unsigned
+        little_pod<unsigned>
             len;  // length in bytes of the data of the JEntry. does not include the JEntry header
-        OpCodes opcode;
+        little_pod<OpCodes> opcode;
     };
 
-    unsigned ofs;  // offset in file
+    little<unsigned> ofs;  // offset in file
 
     // sentinel and masks for _fileNo
     enum {
         DotNsSuffix = 0x7fffffff,  // ".ns" file
         LocalDbBit = 0x80000000    // assuming "local" db instead of using the JDbContext
     };
-    int _fileNo;  // high bit is set to indicate it should be the <dbpath>/local database
+    little<int> _fileNo;  // high bit is set to indicate it should be the <dbpath>/local database
     // char data[len] follows
 
     const char* srcData() const {
-        const int* i = &_fileNo;
+        const little<int>* i = &_fileNo;
         return (const char*)(i + 1);
     }
 
@@ -178,9 +179,9 @@
 struct JSectFooter {
     JSectFooter();
     JSectFooter(const void* begin, int len);  // needs buffer to compute hash
-    unsigned sentinel;
+    little<unsigned> sentinel;
     unsigned char hash[16];
-    unsigned long long reserved;
+    little<unsigned long long> reserved;
     char magic[4];  // "\n\n\n\n"
 
     /** used by recovery to see if buffer is valid
@@ -191,24 +192,24 @@
     bool checkHash(const void* begin, int len) const;
 
     bool magicOk() const {
-        return *((unsigned*)magic) == 0x0a0a0a0a;
+        return little<unsigned>::ref(magic) == 0x0a0a0a0a;
     }
 };
 
 /** declares "the next entry(s) are for this database / file path prefix" */
 struct JDbContext {
     JDbContext() : sentinel(JEntry::OpCode_DbContext) {}
-    const unsigned sentinel;  // compare to JEntry::len -- zero is our sentinel
+    const little<unsigned> sentinel;  // compare to JEntry::len -- zero is our sentinel
     // char dbname[];
 };
 
 /** "last sequence number" */
 struct LSNFile {
-    unsigned ver;
-    unsigned reserved2;
-    unsigned long long lsn;
-    unsigned long long checkbytes;
-    unsigned long long reserved[8];
+    little<unsigned> ver;
+    little<unsigned> reserved2;
+    little<unsigned long long> lsn;
+    little<unsigned long long> checkbytes;
+    little<unsigned long long> reserved[8];
 
     void set(unsigned long long lsn);
     unsigned long long get();
--- ./src/mongo/db/storage/mmap_v1/dur_recover.cpp.ORIGIN	2015-12-02 20:01:34.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/dur_recover.cpp	2015-12-08 15:39:18.000000000 +0100
@@ -33,6 +33,7 @@
 #include "mongo/platform/basic.h"
 
 #include "mongo/db/storage/mmap_v1/dur_recover.h"
+#include "mongo/db/storage/mmap_v1/bswap.h"
 
 #include <cstring>
 #include <fcntl.h>
@@ -661,7 +662,7 @@
 }
 
 struct BufReaderY {
-    int a, b;
+    little<int> a, b;
 };
 class BufReaderUnitTest : public StartupTest {
 
--- ./src/mongo/db/storage/mmap_v1/btree/btree_ondisk.cpp.ORIGIN	2015-12-02 20:01:34.000000000 +0100
+++ ./src/mongo/db/storage/mmap_v1/btree/btree_ondisk.cpp	2015-12-08 15:31:16.000000000 +0100
@@ -53,6 +53,9 @@
         la = 0;
         ofs = OurNullOfs;
     }
+#if MONGO_CONFIG_BYTE_ORDER == 4321
+    la <<= 8;
+#endif
     memcpy(_a, &la, 3);  // endian
 }
 
--- ./src/mongo/db/storage/mmap_v1/catalog/namespace_details_collection_entry.cpp.ORIGIN	2019-05-24 16:13:59 -0500
+++ ./src/mongo/db/storage/mmap_v1/catalog/namespace_details_collection_entry.cpp	2019-05-24 16:17:34 -0500
@@ -35,6 +35,7 @@
 #include "mongo/db/catalog/database.h"
 #include "mongo/db/catalog/database_holder.h"
 #include "mongo/db/catalog/uuid_catalog.h"
+#include "mongo/db/storage/mmap_v1/bswap.h"
 #include "mongo/db/index/index_descriptor.h"
 #include "mongo/db/ops/update.h"
 #include "mongo/db/record_id.h"
@@ -378,14 +379,14 @@
             massert(16631, "index does not have an 'expireAfterSeconds' field", false);
             break;
         case NumberInt:
-            *opCtx->recoveryUnit()->writing(reinterpret_cast<int*>(nonConstPtr)) = newExpireSeconds;
+            *opCtx->recoveryUnit()->writing(&little<int>::ref(nonConstPtr)) = newExpireSeconds;
             break;
         case NumberDouble:
-            *opCtx->recoveryUnit()->writing(reinterpret_cast<double*>(nonConstPtr)) =
+            *opCtx->recoveryUnit()->writing(&little<double>::ref(nonConstPtr)) =
                 newExpireSeconds;
             break;
         case NumberLong:
-            *opCtx->recoveryUnit()->writing(reinterpret_cast<long long*>(nonConstPtr)) =
+            *opCtx->recoveryUnit()->writing(&little<long long>::ref(nonConstPtr)) =
                 newExpireSeconds;
             break;
         default:
--- ./src/mongo/db/storage/mmap_v1/dur.cpp.ORIGIN	2019-05-24 16:17:48 -0500
+++ ./src/mongo/db/storage/mmap_v1/dur.cpp	2019-05-24 16:18:35 -0500
@@ -335,7 +335,7 @@
 // See SERVER-5723 for performance improvement.
 // See SERVER-5680 to see why this code is necessary on Windows.
 // See SERVER-8795 to see why this code is necessary on Solaris.
-#if defined(_WIN32) || defined(__sun)
+#if defined(_WIN32) || defined(__sun) || defined(_AIX)
     LockMongoFilesExclusive lk(opCtx);
 #else
     LockMongoFilesShared lk(opCtx);
--- ./src/mongo/db/storage/mmap_v1/mmap_posix.cpp.ORIGIN	2019-05-24 16:18:51 -0500
+++ ./src/mongo/db/storage/mmap_v1/mmap_posix.cpp	2019-05-24 16:19:48 -0500
@@ -257,10 +257,15 @@
 }
 
 void* MemoryMappedFile::remapPrivateView(OperationContext* opCtx, void* oldPrivateAddr) {
-#if defined(__sun)  // SERVER-8795
+#if defined(__sun) || defined(_AIX) // SERVER-8795
     LockMongoFilesExclusive lockMongoFiles(opCtx);
 #endif
 
+#if defined(_AIX)
+    // AIX does not support remapping
+    munmap(oldPrivateAddr, len);
+#endif
+
     // don't unmap, just mmap over the old region
     void* x = mmap(oldPrivateAddr,
                    len,
--- ./src/mongo/db/storage/mmap_v1/btree/key.cpp.ORIGIN	2019-05-24 16:20:04 -0500
+++ ./src/mongo/db/storage/mmap_v1/btree/key.cpp	2019-05-24 16:25:37 -0500
@@ -440,18 +440,18 @@
             case cdouble:
                 b.append(
                     "",
-                    ConstDataView(reinterpret_cast<const char*>(p)).read<LittleEndian<double>>());
+                    ConstDataView((const char*)p).read<LittleEndian<double>>());
                 p += sizeof(double);
                 break;
             case cint:
                 b.append("",
-                         static_cast<int>(ConstDataView(reinterpret_cast<const char*>(p))
+                         static_cast<int>(ConstDataView((const char*)p)
                                               .read<LittleEndian<double>>()));
                 p += sizeof(double);
                 break;
             case clong:
                 b.append("",
-                         static_cast<long long>(ConstDataView(reinterpret_cast<const char*>(p))
+                         static_cast<long long>(ConstDataView((const char*)p)
                                                     .read<LittleEndian<double>>()));
                 p += sizeof(double);
                 break;
@@ -478,8 +478,8 @@
     // same type
     switch (lt) {
         case cdouble: {
-            double L = ConstDataView(reinterpret_cast<const char*>(l)).read<LittleEndian<double>>();
-            double R = ConstDataView(reinterpret_cast<const char*>(r)).read<LittleEndian<double>>();
+            double L = ConstDataView((const char*)l).read<LittleEndian<double>>();
+            double R = ConstDataView((const char*)r).read<LittleEndian<double>>();
             if (L < R)
                 return -1;
             if (L != R)
@@ -531,9 +531,9 @@
         }
         case cdate: {
             long long L =
-                ConstDataView(reinterpret_cast<const char*>(l)).read<LittleEndian<long long>>();
+                ConstDataView((const char*)l).read<LittleEndian<long long>>();
             long long R =
-                ConstDataView(reinterpret_cast<const char*>(r)).read<LittleEndian<long long>>();
+                ConstDataView((const char*)r).read<LittleEndian<long long>>();
             if (L < R)
                 return -1;
             if (L > R)
